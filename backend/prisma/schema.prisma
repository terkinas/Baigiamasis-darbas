// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  
  role     String   @default("USER")
  xp       Int      @default(0)

  username     String  @unique @db.VarChar(24)
  password String
  createdAt DateTime @default(now())

  email       String?
  isChatBanned Boolean @default(false)
  avatarId    Int    @default(1)

  balance    Balance?
  bets        Bet[]
  messages    Message[]
  wallets     Wallet[]
}

enum Role {
  USER
  ADMIN
  BOT
}

model Balance {
  id       String   @id @default(uuid())
  userId   String   @unique
  amount   Int
  lastClaimed BigInt   @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Game {
  id        Int      @id @default(autoincrement())
  name      String
  rounds    Round[]
  bets       Bet[]
}

model Round {
  id          Int      @id @default(autoincrement())
  game       Game     @relation(fields: [gameId], references: [id])
  gameId      Int
  isOpen      Boolean  @default(true)
  outcome     String?
  outcomeNumber Int?   @default(-1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())

  bets        Bet[]
}

model Bet {
  id          Int       @id @default(autoincrement())
  game        Game     @relation(fields: [gameId], references: [id])
  gameId      Int
  round       Round     @relation(fields: [roundId], references: [id])
  roundId     Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String       // ID of the user placing the bet
  amount      Float     // Amount of the bet
  betType     String    // Type of bet (e.g., color, number)
  outcome     String?   // Outcome of the bet (e.g., winning color or number)
  isSettled   Boolean   @default(false)
  createdAt   DateTime  @default(now())
}

model Wallet {
  id                  String      @id @default(uuid())
  userId              String
  user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  address             String
  currency            String
  balance             Decimal   @default(0)
  totalReceived       Decimal   @default(0)
  publicKey           String
  privateKey          String
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  deposits            Deposit[]
}

model Deposit {
  id          String      @id @default(uuid())
  userId      String
  walletId    String
  wallet      Wallet      @relation(fields: [walletId], references: [id])
  amount      Decimal?
  status      DepositStatus
  txHash      String?
  currency    String?
  currencyPrice Decimal?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum DepositStatus {
  PENDING
  COMPLETED
  FAILED
}

model DepositCheckCooldown {
  // id          Int      @id @default(autoincrement())
  userId      String  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Message {
  id          Int      @id @default(autoincrement())
  content     String   @default("") @db.VarChar(128)
  createdAt     DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
}

model RequestCounter {
  id          Int      @id @default(autoincrement())
  endpoint    String
  count       Int
  ip          String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Avatar {
  id       Int      @id @default(autoincrement())
  url      String
}